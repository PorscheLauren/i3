<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>i3-msg</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">i3</refmiscinfo>
<refmiscinfo class="version">4.12</refmiscinfo>
<refmiscinfo class="manual">i3 Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>i3-msg</refname>
  <refpurpose>send messages to i3 window manager</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<simpara>i3-msg  [-q] [-v] [-h] [-s socket] [-t type] [message]</simpara>
</refsynopsisdiv>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-q, --quiet</emphasis>
</term>
<listitem>
<simpara>
Only send ipc message and suppress the output of the response.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-v, --version</emphasis>
</term>
<listitem>
<simpara>
Display version number and exit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-h, --help</emphasis>
</term>
<listitem>
<simpara>
Display a short help-message and exit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-s, --socket</emphasis> <emphasis>sock_path</emphasis>
</term>
<listitem>
<simpara>
i3-msg will use the environment variable I3SOCK or the socket path
given here. If both fail, it will try to get the socket information
from the root window and then try /tmp/i3-ipc.sock before exiting
with an error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-t</emphasis> <emphasis>type</emphasis>
</term>
<listitem>
<simpara>
Send ipc message, see below. This option defaults to "command".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">message</emphasis>
</term>
<listitem>
<simpara>
Send ipc message, see below.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_ipc_message_types">
<title>IPC MESSAGE TYPES</title>
<variablelist>
<varlistentry>
<term>
command
</term>
<listitem>
<simpara>
The payload of the message is a command for i3 (like the commands you can bind
to keys in the configuration file) and will be executed directly after
receiving it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_workspaces
</term>
<listitem>
<simpara>
Gets the current workspaces. The reply will be a JSON-encoded list of
workspaces.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_outputs
</term>
<listitem>
<simpara>
Gets the current outputs. The reply will be a JSON-encoded list of outputs (see
the reply section of docs/ipc, e.g. at
<ulink url="http://i3wm.org/docs/ipc.html#_receiving_replies_from_i3">http://i3wm.org/docs/ipc.html#_receiving_replies_from_i3</ulink>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_tree
</term>
<listitem>
<simpara>
Gets the layout tree. i3 uses a tree as data structure which includes every
container. The reply will be the JSON-encoded tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_marks
</term>
<listitem>
<simpara>
Gets a list of marks (identifiers for containers to easily jump to them later).
The reply will be a JSON-encoded list of window marks.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_bar_config
</term>
<listitem>
<simpara>
Gets the configuration (as JSON map) of the workspace bar with the given ID. If
no ID is provided, an array with all configured bar IDs is returned instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_binding_modes
</term>
<listitem>
<simpara>
Gets a list of configured binding modes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get_version
</term>
<listitem>
<simpara>
Gets the version of i3. The reply will be a JSON-encoded dictionary with the
major, minor, patch and human-readable version.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>i3-msg is a sample implementation for a client using the unix socket IPC
interface to i3.</simpara>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<screen># Use 1-px border for current client
i3-msg "border 1pixel"

# You can leave out the quotes
i3-msg border normal

# Dump the layout tree
i3-msg -t get_tree</screen>
</refsect1>
<refsect1 id="_environment">
<title>ENVIRONMENT</title>
<refsect2 id="_i3sock">
<title>I3SOCK</title>
<simpara>If no ipc-socket is specified on the commandline, this variable is used
to determine the path, at which the unix domain socket is expected, on which
to connect to i3.</simpara>
</refsect2>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara>i3(1)</simpara>
</refsect1>
<refsect1 id="_author">
<title>AUTHOR</title>
<simpara>Michael Stapelberg and contributors</simpara>
</refsect1>
</refentry>
